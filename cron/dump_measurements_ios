#!/usr/bin/env bash


set -euo pipefail

source cron_env.sh

cd ../public/system

psql -f "${CRON_DIR}/dump_measurements_ios.sql"

# don't purge sqlite output if nothing resulted from psql, so as to do less work and retain date on http file
# this is to support only updating if newer data

# 2014-04-15 ND: Combine deprecated 16-bit output and 32-bit output into single step.
#                In combination with only one CSV export, should help reduce server load.

if [ -s ios13_32.csv ]
then
  rm -f /tmp/ios13_32.sqlite
  /bin/echo -e "PRAGMA journal_mode=OFF;PRAGMA page_size=16384;CREATE TABLE ImpTemp(X VARCHAR(32), Y VARCHAR(32), Z VARCHAR(32));CREATE TABLE Grid1(ID INTEGER PRIMARY KEY, X INT, Y INT, Z INT);\n.separator ','\n.import ios13_32.csv ImpTemp\nINSERT INTO Grid1(X,Y,Z) SELECT CAST(X AS INT), CAST(Y AS INT), CAST(CAST(Z AS INT)-32768 AS INT) FROM ImpTemp;DROP TABLE ImpTemp;VACUUM;" | sqlite3 /tmp/ios13_32.sqlite

  # ***** 16-bit v. 1.6.9 support for iOS 5 *****
  #   copy 32-bit output and clip to INT16_MAX.
  cp /tmp/ios13_32.sqlite /tmp/ios13.sqlite
  /bin/echo -e "PRAGMA journal_mode=OFF;UPDATE Grid1 SET Z=32767 WHERE Z>32767;" | sqlite3 /tmp/ios13.sqlite

  mv /tmp/ios13_32.sqlite ios13_32.sqlite
  mv /tmp/ios13.sqlite ios13.sqlite
fi

# 2014-04-15 ND: commenting this out to combine into single composite DB import above

# 16-bit update file: iOS client 1.6.9
# must be maintained for some period of time as 1.7.0 requires iOS 6.0 minimum.
#if [ -s /tmp/ios13.csv ]
#then
  #cd /tmp
  #rm -f /tmp/ios13.sqlite
  #/bin/echo -e "PRAGMA journal_mode=OFF;PRAGMA page_size=16384;CREATE TABLE ImpTemp(X VARCHAR(32), Y VARCHAR(32), Z VARCHAR(32));CREATE TABLE Grid1(ID INTEGER PRIMARY KEY, X INT, Y INT, Z INT);\n.separator ','\n.import /tmp/ios13.csv ImpTemp\nINSERT INTO Grid1(X,Y,Z) SELECT CAST(X AS INT), CAST(Y AS INT), CAST(CAST(Z AS INT)-32768 AS INT) FROM ImpTemp;DROP TABLE ImpTemp;VACUUM;" | sqlite3 /tmp/ios13.sqlite
  #rm -f /var/deploy/api.safecast.org/web_head/shared/system/ios13.sqlite

  #cp /tmp/ios13.sqlite /var/deploy/api.safecast.org/web_head/shared/system/ios13.sqlite
#fi

# 32-bit update file: iOS client 1.7.0+
#if [ -s /tmp/ios13_32.csv ]
#then
  #cd /tmp
  #rm -f /tmp/ios13_32.sqlite
  #/bin/echo -e "PRAGMA journal_mode=OFF;PRAGMA page_size=16384;CREATE TABLE ImpTemp(X VARCHAR(32), Y VARCHAR(32), Z VARCHAR(32));CREATE TABLE Grid1(ID INTEGER PRIMARY KEY, X INT, Y INT, Z INT);\n.separator ','\n.import /tmp/ios13_32.csv ImpTemp\nINSERT INTO Grid1(X,Y,Z) SELECT CAST(X AS INT), CAST(Y AS INT), CAST(CAST(Z AS INT)-32768 AS INT) FROM ImpTemp;DROP TABLE ImpTemp;VACUUM;" | sqlite3 /tmp/ios13_32.sqlite
  #rm -f /var/deploy/api.safecast.org/web_head/shared/system/ios13_32.sqlite

  #cp /tmp/ios13_32.sqlite /var/deploy/api.safecast.org/web_head/shared/system/ios13_32.sqlite
#fi

# TODO: final output as .tar.gz instead of sqlite.  Requires finding non-memory bound decompressor on iOS.

